package com.partner.busi.model;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.partner.busi.model.base.BaseMatchUser;
import org.apache.commons.lang.StringUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class MatchUser extends BaseMatchUser<MatchUser> {
	public static final MatchUser dao = new MatchUser();
	
	public List<MatchUser> findUserByMatchId(Map<String,Object> params){
		String sql = "select * from t_match_user where 1=1 ";
		List<Object> paraLst = new  ArrayList<Object>();
		if(StringUtils.isNotBlank(params.get("matchId").toString())){
			sql +=" AND MATCH_ID = ?  ";
			paraLst.add(params.get("matchId").toString());
		}
		if(StringUtils.isNotBlank(params.get("userId").toString())){
			sql +=" AND USER_ID = ? ";
			paraLst.add(params.get("userId").toString());
		}
		sql+=" ORDER BY CREATE_TIME ";
		return dao.find(sql,paraLst.toArray());
	};
	
	public void delMatchUser(int matchId, int userId){
		MatchUser user = dao.findFirst("select * from t_match_user where MATCH_ID = "+matchId+" AND USER_ID = "+userId);
		//user.set(attr, value);//修改状态，增加状态用来标记用户是否参加比赛
		dao.update();
	}
	
	public List<MatchUser> findMatchUserListBySeq(String matchId) {
		StringBuilder sql = new StringBuilder("select m.ID, u.NAME, m.START_SCORE, m.USER_ID from t_match_user m, t_user u where m.USER_ID = u.ID and m.SEQ IS NOT NULL AND m.MATCH_ID = "+matchId);
		/*List<Object> params = new ArrayList<Object>();
		params.add(matchId);*/
		sql.append(" order by m.SEQ");
		//return paginate(pageNum, pagesize, select, sql.toString(), params.toArray());
		return dao.find(sql.toString());
	}
	
	public MatchUser findMatchUserByUID(String matchId, String uid) {
		StringBuilder sql = new StringBuilder("select * from t_match_user where USER_ID = "+uid+" AND MATCH_ID = "+matchId);
		return dao.findFirst(sql.toString());
	}
	
	public List<MatchUser> findMatchUserListNoSeq(String matchId) {
		StringBuilder sql = new StringBuilder(" select m.ID, u.NAME, m.START_SCORE, m.USER_ID from t_match_user m, t_user u where m.USER_ID = u.ID and m.SEQ IS NULL AND m.MATCH_ID = "+matchId);
		sql.append(" order by m.SEQ ");
		return dao.find(sql.toString());
	}
	
	public List<MatchUser> findMatchUserListByMatchId(String matchId){
		StringBuilder sql = new StringBuilder(" select m.SEQ, m.CREATE_TIME, m.START_SCORE, u.EMAIL, u.GENDER, u.PHONE, u.NAME from t_match_user m, t_user u where m.USER_ID = u.ID AND m.MATCH_ID = "+matchId);
		sql.append(" order by m.SEQ ");
		return dao.find(sql.toString());
	}
	
	public Page<MatchUser> findMatchUserListByMatchId(int pageNum, Integer pagesize,String matchId){
		String select = " select m.SEQ, m.CREATE_TIME, m.START_SCORE, u.EMAIL, u.GENDER, u.PHONE, u.NAME";
		StringBuilder sql = new StringBuilder(" from t_match_user m, t_user u where m.USER_ID = u.ID AND m.MATCH_ID = "+matchId);
		sql.append(" order by m.CREATE_TIME ");
		return paginate(pageNum, pagesize, select, sql.toString());
	}
	
	public List<MatchUser> findUserByMatchId(int matchId){
		String sql = "select * from t_match_user where MATCH_ID = ? and SEQ is not null order by SEQ ";
		return dao.find(sql, matchId);
	};
	
	public void setNAME(String name) {
		set("NAME", name);
	}
	
	public String getNAME() {
		return get("NAME");
	}
	
	public void setEMAIL(String email) {
		set("EMAIL", email);
	}
	
	public String getEMAIL() {
		return get("EMAIL");
	}
	
	public void setGENDER(Integer gender) {
		set("GENDER", gender);
	}
	
	public Integer getGENDER() {
		return get("GENDER");
	}
	
	public void setPHONE(String phone) {
		set("PHONE", phone);
	}
	
	public String getPHONE() {
		return get("PHONE");
	}
	public void setMaxSeq(Integer maxSeq) {
		set("maxSeq", maxSeq);
	}
	
	public Integer getMaxSeq() {
		return get("maxSeq");
	}
	/**
	 * 
	 * @param matchId
	 * @param seq
	 * @return int >=1 为成功
	 * 批量对SEQ 进行递减操作
	 */
	public int batchUpdateSeq(int matchId, int seq){
		StringBuffer sb = new StringBuffer(" UPDATE t_match_user MU SET MU.SEQ = MU.SEQ-1 WHERE MU.MATCH_ID = "+matchId+" AND MU.SEQ IS NOT NULL AND MU.SEQ > "+seq);
		return Db.update(sb.toString());
	}
	
	public int countMatchPersion(int matchId){
		String sql = " SELECT max(seq) as maxSeq  from t_match_user where MATCH_ID = "+matchId+" and SEQ IS NOT NULL";
		MatchUser matchUser = dao.findFirst(sql);
		if(matchUser.getMaxSeq() == null)
			return 0;
		else
		return matchUser.getMaxSeq();
	}
	
	public boolean deleteByUserIdAndActId(Integer userId, int matId) {
		int rs = Db.update("delete from t_match_user where USER_ID = ? and MATCH_ID = ?",userId,matId);
		if(rs==0){
			return false;
		}else{
			return true;
		}
	}
	/**
	 * 
	 * @param id
	 * @param score
	 * @return int >=1 为成功
	 */
	public int updateStartScore(int id, String score){
		StringBuffer sb = new StringBuffer(" UPDATE t_match_user MU SET MU.START_SCORE = '"+score+"' WHERE MU.ID = "+id);
		return Db.update(sb.toString());
	}

	public Page<MatchUser> findMatUserList(String title, int pageNum, int pageSize) {
		String select = " select t.* ";
		StringBuilder sql = new StringBuilder(" FROM t_user t where t.LAST_START_SCORE<>'' ");
		List<Object> params = new ArrayList<Object>();
		if (StringUtils.isNotBlank(title)) {
			sql.append(" and NICKNAME like ? ");
			params.add("%" + title + "%");
		}
		sql.append(" ORDER BY t.NICKNAME ");
		return paginate(pageNum, pageSize, select, sql.toString(), params.toArray());
	}
}
